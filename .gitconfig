# set your user tokens as enivornment variables, such as ~/.secrets
# See the README for examples.
[color]
  ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[alias]
  # add
  a = add .                         # add everything to the staging area
  chunkyadd = add --patch           # stage commits chunk by chunk

  # branch
  b = branch -v                     # branch (verbose)

  # commit
  c = commit -m                           # commit with message
  ca = commit -am                         # commit all with message
  ci = commit                             # commit
  cn = commit -n                          # commit with no hooks
  aci = !git add . && git commit          # add everything commit
  acn = !git add . && git commit -n       # add everything _and_ commit with no hooks
  amend = commit --amend                  # amend your last commit
  namend = commit --amend -n              # amend your last commit with no hooks 
  amen = commit --amend --no-edit         # amend your last commit without prompting for the commit message
  namen = commit --amend --no-edit -n     # like amen, but skip commit hooks
  anamen = commit -a --amend --no-edit -n # like namen, but stage all changes before commmit

  # checkout
  co = checkout                     # checkout
  cm = checkout master              # checkout master
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  dsf = "!git diff --color $@ | diff-so-fancy"
  last = diff HEAD^                 # diff last committed change

  # fetch
  fu = fetch upstream

  # log
  l = log --graph --date=short
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  changelog = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  #ls
  ls = diff-tree --no-commit-id --name-only -r

  # pull
  pl = pull                         # pull
  prud = pull --rebase upstream develop
  prum = pull --rebase upstream master

  # push
  ps = push                         # push
  fp = !sh -c 'git push --force origin `git rev-parse --abbrev-ref HEAD`' -
  fpn = !sh -c 'git push --force --no-verify origin `git rev-parse --abbrev-ref HEAD`' -
  fpu = !sh -c 'git push --force upstream `git rev-parse --abbrev-ref HEAD`' -
  fpc = !sh -c 'git push --force codazzo `git rev-parse --abbrev-ref HEAD`' -
  fpa = !sh -c 'git push --force adettole `git rev-parse --abbrev-ref HEAD`' -

  # rebase
  ra = rebase --abort
  rc = rebase --continue
  arc = !git add . && git rebase --continue
  rs = rebase --skip
  ri = !sh -c 'git rebase -i HEAD~$1' -
  riud = rebase -i upstream/develop
  rius = rebase -i upstream/staging
  rium = rebase -i upstream/master
  rumid = rebase upstream/master --ignore-date
  rusid = rebase upstream/staging --ignore-date
  rudid = rebase upstream/develop --ignore-date

# remote
  r = remote -v                     # show remotes (verbose)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  us      = reset HEAD
  uncommit = reset HEAD^            # go back before last commit, with files in uncommitted state
  uc       = reset HEAD^
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool
  rh = reset --hard

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
  st = status                       # status
  stat = status                     # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  #wip
  wip = !git add . && git commit -n -m "WIP"

  # svn helpers
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit

  #recent branches
  rb = for-each-ref --count=30 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  #pr's
  pr = !git fetch -fu ${2:-upstream} refs/pull/$1/head:pr/$1 && git checkout pr/$1 && :
  pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
  prompt = false
  keepBackup = true
[mergetool "mvimdiff"]
  cmd="mvim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
  keepbackup=false
[merge]
  summary = true
  verbosity = 1
  tool = mvimdiff
[apply]
  whitespace = nowarn
[branch]
  autosetupmerge = true
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = current
[core]
  autocrlf = false
  editor = subl -n -w
  excludesfile = /Users/codazzo/.gitignore_global
[advice]
  statusHints = false
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true
[include]
  path = .gitconfig.user
[user]
  name = Antonio D'Ettole
  email = antonio@example.com
[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path =
[mergetool "sourcetree"]
  cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true
